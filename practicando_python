# -*- coding: utf-8 -*-
"""practica 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OO7KsjeA-4pcLbq5i-A1zJF66TNusgU6

Read and clean the temperature dataset. Analyse the dataset and detect if outliers must be filtered out (for example, days with extremely high or extremely low temperatures). Check all the columns to find weird data points that should be removed. Remove duplicates if any. Temperatures are in Fahrenheit, transform them to Celsius.
"""

import pandas as pd
import matplotlib.pyplot as plt


GDP = pd.read_csv('/content/gdp.csv')
city_temp = pd.read_csv('/content/city_temperature.csv')

# no hay valores nulos o vacio
pd.isnull('GDP')
pd.isnull('city_temp')

#tipo de datos
print(GDP.dtypes)
print(city_temp.dtypes)

# buscar duplicados y valores nan
GDP.duplicated()
city_temp.duplicated()
nan_values = city_temp.isna()
nan_values = GDP.isna()

# voy quitar la comlumna state porque todos los valores son NaN

drop_columna = city_temp.drop('State', axis=1, inplace=True)

city_temp

#filtar la temperaturas mas altas y mas bajas
fillter_high = city_temp[['AvgTemperature']].max()
filter_low = city_temp[['AvgTemperature']].min()
fillter_high
filter_low

#convertir F a C
# Definir la función de conversión
def fahrenheit_a_celsius(fahrenheit):
    return (fahrenheit - 32) * 5/9

# Aplicar la función a toda la columna 'Temperatura_F'
city_temp['AvgTemperature'] = city_temp['AvgTemperature'].apply(fahrenheit_a_celsius)


# Mostrar el DataFrame resultante
print(city_temp)

"""Read and clean the GDP dataset.
Filter out non-existent countries (ie: World, Europe, etc.). The dataset should only contain real countries.
Change the name of the column Value to GDP.
"""

#buscar nombre unicos, para identificar lo que no son paises
unique_countries = GDP['Country Name'].unique()
print(unique_countries)

# quitar World, Europa , Africa y todos los continentes y dejar solo paises
GDP_filtered = GDP.loc[GDP['Country Name'] != 'Arab World']
# hacer una lista de valores a excluir
lista_out = lista_valores = [
    'Arab World', 'Caribbean small states', 'Central Europe and the Baltics',
    'Early-demographic dividend', 'East Asia & Pacific',
    'East Asia & Pacific (excluding high income)',
    'East Asia & Pacific (IDA & IBRD countries)', 'Euro area',
    'Europe & Central Asia', 'Europe & Central Asia (excluding high income)',
    'Europe & Central Asia (IDA & IBRD countries)', 'European Union',
    'Fragile and conflict affected situations',
    'Heavily indebted poor countries (HIPC)', 'High income', 'IBRD only',
    'IDA & IBRD total', 'IDA blend', 'IDA only', 'IDA total',
    'Late-demographic dividend', 'Latin America & Caribbean',
    'Latin America & Caribbean (excluding high income)',
    'Latin America & the Caribbean (IDA & IBRD countries)',
    'Least developed countries: UN classification', 'Low & middle income',
    'Low income', 'Lower middle income', 'Middle East & North Africa',
    'Middle East & North Africa (excluding high income)',
    'Middle East & North Africa (IDA & IBRD countries)', 'Middle income',
    'North America', 'OECD members', 'Other small states',
    'Pacific island small states', 'Post-demographic dividend',
    'Pre-demographic dividend', 'Small states', 'South Asia',
    'South Asia (IDA & IBRD)', 'Sub-Saharan Africa',
    'Sub-Saharan Africa (excluding high income)',
    'Sub-Saharan Africa (IDA & IBRD countries)', 'Upper middle income', 'World'
]

# Filtrar el DataFrame para obtener solo las filas que no contienen los valores de la lista
GDP_filtrado = GDP[~GDP['Country Name'].isin(lista_out)]

# Mostrar el DataFrame resultante

GDP_filtrado

GDP_filtrado.rename(columns={'Value': 'GDP'}, inplace=True)
GDP_filtrado

# agregar una columna nombre Year el city_temp
#city_temp.insert

GDP_city =pd.merge(GDP_filtrado, city_temp, on ='Year', suffixes =( '_GDP', '_city_temp'))

# buscar valores nan
filas_nan = GDP[GDP.isna().any(axis=1)]
#quitar los valores nan
city_temp.drop(filas_nan.index, inplace=True)
print(filas_nan)

"""Join the two datasets: temperature and GDP.
To do so you first need to add a column year in the temperature dataset. Then you need to join the temperature
and GDP dataset using the columns year and country . Notice that maybe you have to rename some columns
to make it work.
Check if we're losing some data. For example, after the join is there some country that is not present anymore?
"""

#cual es pais con mayor temperatura
mayor_tem = GDP_city[GDP_city['AvgTemperature'] == GDP_city['AvgTemperature'].max()]
menor_temp = GDP_city[GDP_city['AvgTemperature'] == GDP_city['AvgTemperature'].min()]
promedio_temp =GDP_city['AvgTemperature'].mean()

# Cálculos
promedio_temp = GDP_city['AvgTemperature'].mean()
max_temp_row = GDP_city[GDP_city['AvgTemperature'] == GDP_city['AvgTemperature'].max()]
min_temp_row = GDP_city[GDP_city['AvgTemperature'] == GDP_city['AvgTemperature'].min()]

# Crear un nuevo DataFrame
resumen_temperaturas = pd.DataFrame({
    'Nombre de Fila': ['Promedio', 'Máximo', 'Mínimo'],
    'Temperatura': [promedio_temp, max_temp_row['AvgTemperature'].values[0], min_temp_row['AvgTemperature'].values[0]]
})

print(resumen_temperaturas)

"""Analyse the temperature dataset and find insights. Here are some examples, but feel free to do further analysis
Write a function that for a given country plots the average temperature per month. On the x-axis you should have
the month, and on the y-axis the average temperature
"""